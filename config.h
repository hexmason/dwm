#include <X11/XF86keysym.h>

/* appearance */
static const unsigned int borderpx  = 2;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const unsigned int gappih    = 15;       /* horiz inner gap between windows */
static const unsigned int gappiv    = 10;       /* vert inner gap between windows */
static const unsigned int gappoh    = 10;       /* horiz outer gap between windows and screen edge */
static const unsigned int gappov    = 15;       /* vert outer gap between windows and screen edge */
static const int smartgaps          = 0;        /* 1 means no outer gap when there is only one window */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const int vertpad            = 10;       /* vertical padding of bar */
static const int sidepad            = 15;       /* horizontal padding of bar */
static const char *fonts[]          = { "JetBrainsMono Nerd Font:size=14" };
static const char dmenufont[]       = "JetBrainsMono Nerd Font:size=14";
static char normbgcolor[]           = "#222222";
static char normbordercolor[]       = "#444444";
static char normfgcolor[]           = "#bbbbbb";
static char selfgcolor[]            = "#eeeeee";
static char selbordercolor[]        = "#005577";
static char selbgcolor[]            = "#005577";
static char *colors[][3] = {
       /*               fg           bg           border   */
       [SchemeNorm] = { normfgcolor, normbgcolor, normbordercolor },
       [SchemeSel]  = { selfgcolor,  selbgcolor,  selbordercolor  },
};

/* tagging */
static const char *tags[] = { "", "", "", "", "", "", "", "" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class                    instance            title tags mask iscentered isfloating monitor */
    { "librewolf",                  NULL,               NULL, 1 << 3,   0,         0,          1 }, 
    { "Chromium",                   NULL,               NULL, 1 << 3,   0,         0,          1 }, 
    { "vieb",                       "vieb",             NULL, 1 << 3,   0,         0,         -1 },
    { "ONLYOFFICE Desktop Editors", "DesktopEditors",   NULL, 1 << 4,   0,         0,         -1 },
    { "Telegram",                   "Telegram",         NULL, 1 << 6,   0,         0,         -1 },
    { "pulsemixer",                 "pulsemixer",       NULL, 0     ,   1,         0,         -1 },
    { "Ardour-8.10.0",              "ardour-8.10.0",    NULL, 1 << 5,   1,         1,         -1 },
    { "st",                         "st",               NULL, 0     ,   1,         0,         -1 },
    { "Sxiv",                       "sxiv",             NULL, 0     ,   1,         1,         -1 },
    { "Zathura",                    "org.pwmt.zathura", NULL, 0     ,   1,         0,         -1 }
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
static const float fgw = .7,fgh = .8;

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "  ",      tile },    /* first entry is default */
	{ "  ",      NULL },    /* no layout function means floating behavior */
	{ "  ",      monocle },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
#define OSC "cat ~/.cache/wal/sequences" /* OSC 11 generated by pywal */
#define OSCWRAPPER(cmd) { .v = (const char*[]){ "/usr/local/bin/st", "-e", "/bin/sh", "-c", OSC "; " cmd , NULL } }
#include "shiftview.c"

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
//static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbordercolor, "-sf", selfgcolor, NULL };
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *termcmd[]  = { "st", NULL };
static const char *goatcmd[]  = { "sh", "-c", "mpv \"$(hurl gopher://bitreich.org/0/memecache/index.meme | grep goat | grep -E '\.(mp4|mkv|webm|avi) ' | cut -f2 -d' ' | sort -R | head -n 1)\"", NULL };
static const char scratchpadname[] = "scratchpad";
static const char *scratchpadcmd[] = { "st", "-t", scratchpadname, "-g", "120x34", NULL };

#include "exitdwm.c"
static Key keys[] = {
	/* modifier                     key                        function        argument */
    { MODKEY|ShiftMask,             XK_a,                      spawn,          SHCMD("/usr/bin/ardour8") },
    { MODKEY|ShiftMask,             XK_l,                      spawn,          SHCMD("/usr/bin/librewolf") },
    { MODKEY|ShiftMask,             XK_v,                      spawn,          SHCMD("/usr/bin/vieb") },
    { MODKEY|ShiftMask,             XK_o,                      spawn,          SHCMD("/usr/bin/onlyoffice-desktopeditors") },
    { MODKEY|ShiftMask,             XK_t,                      spawn,          SHCMD("/usr/bin/Telegram") },
    { 0,                            XK_Print,                  spawn,          SHCMD("/usr/bin/flameshot gui") },
    { MODKEY|ShiftMask,             XK_f,                      spawn,          OSCWRAPPER("/usr/bin/ranger") },
    { MODKEY|ShiftMask,             XK_n,                      spawn,          OSCWRAPPER("/usr/bin/neomutt") },
    { MODKEY|ShiftMask,             XK_m,                      spawn,          OSCWRAPPER("/usr/bin/cmus") },
    { MODKEY|ShiftMask,             XK_s,                      spawn,          SHCMD("/usr/bin/steam") },
    { 0,                            XF86XK_AudioRaiseVolume,   spawn,          SHCMD("~/.local/bin/media-control volume_up") },
    { 0,                            XF86XK_AudioLowerVolume,   spawn,          SHCMD("~/.local/bin/media-control volume_down show_music_in_volume_indicator") },
    { 0,                            XF86XK_AudioMute,          spawn,          SHCMD("~/.local/bin/media-control volume_mute show_music_in_volume_indicator") },
    { 0,                            XF86XK_MonBrightnessUp,    spawn,          SHCMD("~/.local/bin/media-control brightness_up") },
    { 0,                            XF86XK_MonBrightnessDown,  spawn,          SHCMD("~/.local/bin/media-control brightness_down") },
    { 0,                            XF86XK_AudioPause,         spawn,          SHCMD("~/.local/bin/media-control play_pause") },
    { 0,                            XF86XK_AudioPlay,          spawn,          SHCMD("~/.local/bin/media-control play_pause") },
    { 0,                            XF86XK_AudioNext,          spawn,          SHCMD("~/.local/bin/media-control next_track") },
    { 0,                            XF86XK_AudioPrev,          spawn,          SHCMD("~/.local/bin/media-control prev_track") },
    { MODKEY,                       XK_F6,                     spawn,          SHCMD("~/.local/bin/set-theme ~/Pictures/wallpapers/") },
    { MODKEY|ShiftMask,             XK_Home,                   spawn,          SHCMD("~/.local/bin/start-tag") },
    { MODKEY,                       XK_F12,                    spawn,          SHCMD("~/.local/bin/rofi-bluetooth") },
    { MODKEY,                       XK_F11,                    spawn,          SHCMD("~/.local/bin/rofi-mixer") },
    { MODKEY|ControlMask|ShiftMask, XK_g,                      spawn,          {.v = goatcmd } },
	{ MODKEY,                       XK_Escape,                 exitdwm,        {0} },
	{ MODKEY,                       XK_x,                      movecenter,     {0} },
    { MODKEY,                       XK_p,                      spawn,          {.v = dmenucmd } },
    { MODKEY|ShiftMask,             XK_Return,                 spawn,          {.v = termcmd } },
	{ MODKEY,                       XK_grave,                  togglescratch,  {.v = scratchpadcmd } },
    { MODKEY,                       XK_b,                      togglebar,      {0} },
    { MODKEY,                       XK_j,                      focusstack,     {.i = +1 } },
    { MODKEY,                       XK_k,                      focusstack,     {.i = -1 } },
    { MODKEY,                       XK_i,                      incnmaster,     {.i = +1 } },
    { MODKEY,                       XK_d,                      incnmaster,     {.i = -1 } },
    { MODKEY,                       XK_h,                      setmfact,       {.f = -0.05} },
    { MODKEY,                       XK_l,                      setmfact,       {.f = +0.05} },
    { MODKEY,                       XK_Return,                 zoom,           {0} },
    { MODKEY,                       XK_Tab,                    view,           {0} },
    { MODKEY|ShiftMask,             XK_c,                      killclient,     {0} },
    { MODKEY,                       XK_t,                      setlayout,      {.v = &layouts[0]} },
    { MODKEY,                       XK_f,                      setlayout,      {.v = &layouts[1]} },
    { MODKEY,                       XK_m,                      setlayout,      {.v = &layouts[2]} },
    { MODKEY,                       XK_space,                  setlayout,      {0} },
    { MODKEY|ShiftMask,             XK_space,                  togglefloating, {0} },
	{ MODKEY|Mod1Mask,              XK_f,                      togglefullscr,  {0} },
	{ MODKEY|Mod1Mask,              XK_space,                  toggleforegrounded,     {0} },
    { MODKEY,                       XK_0,                      view,           {.ui = ~0 } },
    { MODKEY|ShiftMask,             XK_0,                      tag,            {.ui = ~0 } },
    { MODKEY,                       XK_comma,                  focusmon,       {.i = -1 } },
    { MODKEY,                       XK_period,                 focusmon,       {.i = +1 } },
    { MODKEY|ShiftMask,             XK_comma,                  tagmon,         {.i = -1 } },
    { MODKEY|ShiftMask,             XK_period,                 tagmon,         {.i = +1 } },
    { MODKEY,                       XK_F5,                     xrdb,           {.v = NULL } },
    TAGKEYS(                        XK_1,                      0)
    TAGKEYS(                        XK_2,                      1)
    TAGKEYS(                        XK_3,                      2)
    TAGKEYS(                        XK_4,                      3)
    TAGKEYS(                        XK_q,                      4)
    TAGKEYS(                        XK_w,                      5)
    TAGKEYS(                        XK_e,                      6)
    TAGKEYS(                        XK_r,                      7)
    { MODKEY|ShiftMask,             XK_Escape,                 quit,           {0} },
    { MODKEY,                       XK_s,                      shiftview,      { .i = +1 } },
    { MODKEY,                       XK_a,                      shiftview,      { .i = -1 } }
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
    /* click                event mask      button          function        argument */
    { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
    { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
    { ClkWinTitle,          0,              Button2,        zoom,           {0} },
    { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
    { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
    { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
    { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
    { ClkTagBar,            0,              Button1,        view,           {0} },
    { ClkTagBar,            0,              Button3,        toggleview,     {0} },
    { ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
    { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} }
};
